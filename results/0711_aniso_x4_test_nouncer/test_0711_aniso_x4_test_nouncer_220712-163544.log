22-07-12 16:35:44.163 - INFO:   name: 0711_aniso_x4_test_nouncer
  suffix: None
  model: blind
  distortion: sr
  scale: 4
  crop_border: None
  gpu_ids: [0]
  kernel_size: 21
  sig_min: 0.2
  sig_max: 4
  sig: 1.6
  sig1: [2.0, 2.0, 3.5, 3.5, 3.5, 4.0, 4.0, 4.0, 4.0]
  sig2: [0.5, 1.0, 1.5, 2.0, 2.0, 1.5, 2.0, 3.0, 4.0]
  theta: [0, 10, 30, 45, 90, 120, 135, 165, 180]
  test_noise: True
  noise: 20
  rate_iso: 0
  sv_mode: 0
  test_jpeg: False
  jpeg: 70
  cal_lr_psnr: False
  datasets:[
    test_1:[
      name: Set14
      mode: GT
      dataroot_GT: ../datasets/Set14/HR
      dataroot_LQ: None
      phase: test
      scale: 4
      data_type: img
    ]
  ]
  network_G:[
    which_model_G: BlindNet
    scale: 4
  ]
  path:[
    strict_load: True
    pretrain_model_G: ../experiments/pretrained_models/0222_aniso_x4/370000_G.pth
    root: D:\Fang\study\my_code\Github_code\Kernel_Uncertainty
    results_root: D:\Fang\study\my_code\Github_code\Kernel_Uncertainty\results\0711_aniso_x4_test_nouncer
    log: D:\Fang\study\my_code\Github_code\Kernel_Uncertainty\results\0711_aniso_x4_test_nouncer
  ]
  is_train: False

22-07-12 16:35:44.167 - INFO: Dataset [GTDataset - Set14] is created.
22-07-12 16:35:44.167 - INFO: Number of test images in [Set14]: 14
22-07-12 16:35:44.200 - INFO: Network G structure: DataParallel - BlindNet, with parameters: 2,888,515
22-07-12 16:35:44.201 - INFO: BlindNet(
  (kernel_extra): kernel_extra_mean_var(
    (Encoding_Block1): kernel_extra_Encoding_Block(
      (Conv_head): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (downsample): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): ReLU()
    )
    (Encoding_Block2): kernel_extra_Encoding_Block(
      (Conv_head): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (downsample): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): ReLU()
    )
    (Conv_mid): kernel_extra_conv_mid(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU()
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU()
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (9): ReLU()
      )
    )
    (Decoding_Block1): kernel_extra_Decoding_Block(
      (Conv_t): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (Conv_head): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (act): ReLU()
    )
    (Decoding_Block2): kernel_extra_Decoding_Block(
      (Conv_t): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (Conv_head): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (act): ReLU()
    )
    (Conv_tail): kernel_extra_conv_tail_mean_var(
      (mean): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
      )
      (log_var): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (Conv_end): Conv2d(64, 441, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (SR_net): DLSM(
    (Encoding): Encoding(
      (E1): Sequential(
        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E2): Sequential(
        (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E3): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E4): Sequential(
        (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E5): Sequential(
        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
    )
    (Decoding): Decoding(
      (D1): Sequential(
        (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (D2): Sequential(
        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (D3): Sequential(
        (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (D4): Sequential(
        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (w_generator): Sequential(
        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
        (4): Conv2d(32, 3, kernel_size=(1, 1), stride=(1, 1))
      )
      (u_generator): Sequential(
        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
        (4): Conv2d(32, 3, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (Den_con1): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
    (Den_con2): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
    (Den_con3): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
    (Den_con4): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
  )
)
22-07-12 16:35:44.208 - INFO: Loading model for G [../experiments/pretrained_models/0222_aniso_x4/370000_G.pth] ...
22-07-12 16:35:44.224 - INFO: Model [B_Model] is created.
22-07-12 16:35:44.225 - INFO: 
Testing [Set14]...
22-07-12 16:35:44.922 - INFO: img_001              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 21.68/0.3775; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 47.67 dB.
22-07-12 16:35:45.892 - INFO: img_002              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 24.56/0.6464; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 47.94 dB.
22-07-12 16:35:46.698 - INFO: img_003              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 23.43/0.4791; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 48.38 dB.
22-07-12 16:35:47.124 - INFO: img_004              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 24.57/0.4546; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 46.58 dB.
22-07-12 16:35:47.555 - INFO: img_005              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 20.93/0.5117; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 48.65 dB.
22-07-12 16:35:47.877 - INFO: img_006              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 29.31/0.6814; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 46.97 dB.
22-07-12 16:35:48.504 - INFO: img_007              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 24.39/0.6474; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 48.58 dB.
22-07-12 16:35:48.894 - INFO: img_008              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 28.95/0.8438; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 47.43 dB.
22-07-12 16:35:49.543 - INFO: img_009              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 28.31/0.7681; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 47.49 dB.
22-07-12 16:35:50.273 - INFO: img_010              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 24.74/0.6104; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 47.99 dB.
22-07-12 16:35:51.242 - INFO: img_011              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 27.08/0.8535; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 47.15 dB.
22-07-12 16:35:52.018 - INFO: img_012              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 29.24/0.8051; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 47.44 dB.
22-07-12 16:35:52.938 - INFO: img_013              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 23.88/0.8741; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 48.12 dB.
22-07-12 16:35:53.667 - INFO: img_014              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 24.05/0.6168; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 48.05 dB.
22-07-12 16:35:53.667 - INFO: ----Set14 (14 images), average PSNR_Y/SSIM_Y: 25.36/0.6550, LR_PSNR_Y/LR_SSIM_Y: inf/1.0000, kernel PSNR: 47.75

