22-07-12 16:30:07.504 - INFO:   name: 0711_aniso_x4_test_nouncer
  suffix: None
  model: blind
  distortion: sr
  scale: 4
  crop_border: None
  gpu_ids: [0]
  kernel_size: 21
  sig_min: 0.2
  sig_max: 4
  sig: 1.6
  sig1: [2.0, 2.0, 3.5, 3.5, 3.5, 4.0, 4.0, 4.0, 4.0]
  sig2: [0.5, 1.0, 1.5, 2.0, 2.0, 1.5, 2.0, 3.0, 4.0]
  theta: [0, 10, 30, 45, 90, 120, 135, 165, 180]
  test_noise: True
  noise: 10
  rate_iso: 0
  sv_mode: 0
  test_jpeg: False
  jpeg: 70
  cal_lr_psnr: False
  datasets:[
    test_1:[
      name: Set14
      mode: GT
      dataroot_GT: ../datasets/Set14/HR
      dataroot_LQ: None
      phase: test
      scale: 4
      data_type: img
    ]
  ]
  network_G:[
    which_model_G: BlindNet
    scale: 4
  ]
  path:[
    strict_load: True
    pretrain_model_G: ../experiments/pretrained_models/0222_aniso_x4/370000_G.pth
    root: D:\Fang\study\my_code\Github_code\Kernel_Uncertainty
    results_root: D:\Fang\study\my_code\Github_code\Kernel_Uncertainty\results\0711_aniso_x4_test_nouncer
    log: D:\Fang\study\my_code\Github_code\Kernel_Uncertainty\results\0711_aniso_x4_test_nouncer
  ]
  is_train: False

22-07-12 16:30:07.507 - INFO: Dataset [GTDataset - Set14] is created.
22-07-12 16:30:07.507 - INFO: Number of test images in [Set14]: 14
22-07-12 16:30:07.541 - INFO: Network G structure: DataParallel - BlindNet, with parameters: 2,888,515
22-07-12 16:30:07.541 - INFO: BlindNet(
  (kernel_extra): kernel_extra_mean_var(
    (Encoding_Block1): kernel_extra_Encoding_Block(
      (Conv_head): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (downsample): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): ReLU()
    )
    (Encoding_Block2): kernel_extra_Encoding_Block(
      (Conv_head): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (downsample): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): ReLU()
    )
    (Conv_mid): kernel_extra_conv_mid(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU()
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU()
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (9): ReLU()
      )
    )
    (Decoding_Block1): kernel_extra_Decoding_Block(
      (Conv_t): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (Conv_head): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (act): ReLU()
    )
    (Decoding_Block2): kernel_extra_Decoding_Block(
      (Conv_t): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (Conv_head): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (act): ReLU()
    )
    (Conv_tail): kernel_extra_conv_tail_mean_var(
      (mean): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
      )
      (log_var): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (Conv_end): Conv2d(64, 441, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (SR_net): DLSM(
    (Encoding): Encoding(
      (E1): Sequential(
        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E2): Sequential(
        (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E3): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E4): Sequential(
        (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E5): Sequential(
        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
    )
    (Decoding): Decoding(
      (D1): Sequential(
        (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (D2): Sequential(
        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (D3): Sequential(
        (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (D4): Sequential(
        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (w_generator): Sequential(
        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
        (4): Conv2d(32, 3, kernel_size=(1, 1), stride=(1, 1))
      )
      (u_generator): Sequential(
        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
        (4): Conv2d(32, 3, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (Den_con1): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
    (Den_con2): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
    (Den_con3): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
    (Den_con4): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
  )
)
22-07-12 16:30:07.553 - INFO: Loading model for G [../experiments/pretrained_models/0222_aniso_x4/370000_G.pth] ...
22-07-12 16:30:07.569 - INFO: Model [B_Model] is created.
22-07-12 16:30:07.569 - INFO: 
Testing [Set14]...
22-07-12 16:30:08.224 - INFO: img_001              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 22.22/0.4310; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 48.81 dB.
22-07-12 16:30:09.195 - INFO: img_002              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 25.50/0.6977; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 49.42 dB.
22-07-12 16:30:09.999 - INFO: img_003              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 24.40/0.5494; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 49.87 dB.
22-07-12 16:30:10.480 - INFO: img_004              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 25.16/0.4943; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 46.99 dB.
22-07-12 16:30:10.896 - INFO: img_005              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 21.83/0.5894; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 49.71 dB.
22-07-12 16:30:11.227 - INFO: img_006              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 30.54/0.7140; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 49.06 dB.
22-07-12 16:30:11.878 - INFO: img_007              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 25.80/0.7105; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 49.83 dB.
22-07-12 16:30:12.272 - INFO: img_008              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 30.80/0.8774; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 48.56 dB.
22-07-12 16:30:12.951 - INFO: img_009              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 29.92/0.8034; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 49.00 dB.
22-07-12 16:30:13.679 - INFO: img_010              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 25.91/0.6665; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 49.46 dB.
22-07-12 16:30:14.645 - INFO: img_011              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 28.74/0.8876; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 48.07 dB.
22-07-12 16:30:15.447 - INFO: img_012              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 31.11/0.8337; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 48.80 dB.
22-07-12 16:30:16.329 - INFO: img_013              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 24.94/0.9070; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 48.73 dB.
22-07-12 16:30:17.057 - INFO: img_014              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 25.48/0.6826; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 48.78 dB.
22-07-12 16:30:17.057 - INFO: ----Set14 (14 images), average PSNR_Y/SSIM_Y: 26.60/0.7032, LR_PSNR_Y/LR_SSIM_Y: inf/1.0000, kernel PSNR: 48.94

22-07-12 16:30:17.059 - INFO:   name: 0711_aniso_x4_test_nouncer
  suffix: None
  model: blind
  distortion: sr
  scale: 4
  crop_border: None
  gpu_ids: [0]
  kernel_size: 21
  sig_min: 0.2
  sig_max: 4
  sig: 1.6
  sig1: [2.0, 2.0, 3.5, 3.5, 3.5, 4.0, 4.0, 4.0, 4.0]
  sig2: [0.5, 1.0, 1.5, 2.0, 2.0, 1.5, 2.0, 3.0, 4.0]
  theta: [0, 10, 30, 45, 90, 120, 135, 165, 180]
  test_noise: True
  noise: 10
  rate_iso: 0
  sv_mode: 0
  test_jpeg: False
  jpeg: 70
  cal_lr_psnr: False
  datasets:[
    test_1:[
      name: Set14
      mode: GT
      dataroot_GT: ../datasets/Set14/HR
      dataroot_LQ: None
      phase: test
      scale: 4
      data_type: img
    ]
  ]
  network_G:[
    which_model_G: BlindNet
    scale: 4
  ]
  path:[
    strict_load: True
    pretrain_model_G: ../experiments/pretrained_models/0222_aniso_x4/370000_G.pth
    root: D:\Fang\study\my_code\Github_code\Kernel_Uncertainty
    results_root: D:\Fang\study\my_code\Github_code\Kernel_Uncertainty\results\0711_aniso_x4_test_nouncer
    log: D:\Fang\study\my_code\Github_code\Kernel_Uncertainty\results\0711_aniso_x4_test_nouncer
  ]
  is_train: False

22-07-12 16:30:17.064 - INFO: Dataset [GTDataset - Set14] is created.
22-07-12 16:30:17.064 - INFO: Number of test images in [Set14]: 14
22-07-12 16:30:17.098 - INFO: Network G structure: DataParallel - BlindNet, with parameters: 2,888,515
22-07-12 16:30:17.099 - INFO: BlindNet(
  (kernel_extra): kernel_extra_mean_var(
    (Encoding_Block1): kernel_extra_Encoding_Block(
      (Conv_head): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (downsample): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): ReLU()
    )
    (Encoding_Block2): kernel_extra_Encoding_Block(
      (Conv_head): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (downsample): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): ReLU()
    )
    (Conv_mid): kernel_extra_conv_mid(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU()
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU()
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (9): ReLU()
      )
    )
    (Decoding_Block1): kernel_extra_Decoding_Block(
      (Conv_t): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (Conv_head): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (act): ReLU()
    )
    (Decoding_Block2): kernel_extra_Decoding_Block(
      (Conv_t): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (Conv_head): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (act): ReLU()
    )
    (Conv_tail): kernel_extra_conv_tail_mean_var(
      (mean): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
      )
      (log_var): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (Conv_end): Conv2d(64, 441, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (SR_net): DLSM(
    (Encoding): Encoding(
      (E1): Sequential(
        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E2): Sequential(
        (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E3): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E4): Sequential(
        (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E5): Sequential(
        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
    )
    (Decoding): Decoding(
      (D1): Sequential(
        (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (D2): Sequential(
        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (D3): Sequential(
        (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (D4): Sequential(
        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (w_generator): Sequential(
        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
        (4): Conv2d(32, 3, kernel_size=(1, 1), stride=(1, 1))
      )
      (u_generator): Sequential(
        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
        (4): Conv2d(32, 3, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (Den_con1): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
    (Den_con2): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
    (Den_con3): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
    (Den_con4): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
  )
)
22-07-12 16:30:17.108 - INFO: Loading model for G [../experiments/pretrained_models/0222_aniso_x4/370000_G.pth] ...
22-07-12 16:30:17.124 - INFO: Model [B_Model] is created.
22-07-12 16:30:17.125 - INFO: 
Testing [Set14]...
22-07-12 16:30:17.769 - INFO: img_001              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 22.14/0.4204; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 47.81 dB.
22-07-12 16:30:18.804 - INFO: img_002              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 25.29/0.6855; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 47.99 dB.
22-07-12 16:30:19.582 - INFO: img_003              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 24.25/0.5352; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 48.51 dB.
22-07-12 16:30:20.028 - INFO: img_004              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 25.08/0.4847; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 46.98 dB.
22-07-12 16:30:20.469 - INFO: img_005              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 21.69/0.5749; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 48.42 dB.
22-07-12 16:30:20.789 - INFO: img_006              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 30.36/0.7081; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 47.81 dB.
22-07-12 16:30:21.415 - INFO: img_007              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 25.58/0.7008; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 48.37 dB.
22-07-12 16:30:21.811 - INFO: img_008              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 30.42/0.8700; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 47.36 dB.
22-07-12 16:30:22.500 - INFO: img_009              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 29.67/0.7976; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 47.60 dB.
22-07-12 16:30:23.219 - INFO: img_010              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 25.76/0.6579; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 48.19 dB.
22-07-12 16:30:24.233 - INFO: img_011              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 28.33/0.8807; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 46.97 dB.
22-07-12 16:30:25.093 - INFO: img_012              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 30.82/0.8296; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 47.58 dB.
22-07-12 16:30:25.992 - INFO: img_013              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 24.72/0.9003; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 47.42 dB.
22-07-12 16:30:26.732 - INFO: img_014              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 25.14/0.6679; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 47.88 dB.
22-07-12 16:30:26.733 - INFO: ----Set14 (14 images), average PSNR_Y/SSIM_Y: 26.37/0.6938, LR_PSNR_Y/LR_SSIM_Y: inf/1.0000, kernel PSNR: 47.78

