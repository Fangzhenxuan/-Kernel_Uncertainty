22-07-12 16:42:28.389 - INFO:   name: 0711_aniso_x4_test_nouncer
  suffix: None
  model: blind
  distortion: sr
  scale: 4
  crop_border: None
  gpu_ids: [0]
  kernel_size: 21
  sig_min: 0.2
  sig_max: 4
  sig: 1.6
  sig1: [2.0, 2.0, 3.5, 3.5, 3.5, 4.0, 4.0, 4.0, 4.0]
  sig2: [0.5, 1.0, 1.5, 2.0, 2.0, 1.5, 2.0, 3.0, 4.0]
  theta: [0, 10, 30, 45, 90, 120, 135, 165, 180]
  test_noise: True
  noise: 0
  rate_iso: 0
  sv_mode: 0
  test_jpeg: False
  jpeg: 70
  cal_lr_psnr: False
  datasets:[
    test_1:[
      name: Set14
      mode: GT
      dataroot_GT: ../datasets/Set14/HR
      dataroot_LQ: None
      phase: test
      scale: 4
      data_type: img
    ]
  ]
  network_G:[
    which_model_G: BlindNet_nouncer
    scale: 4
  ]
  path:[
    strict_load: True
    pretrain_model_G: ../experiments/pretrained_models/0228_aniso_x4_nouncer/80000_G.pth
    root: D:\Fang\study\my_code\Github_code\Kernel_Uncertainty
    results_root: D:\Fang\study\my_code\Github_code\Kernel_Uncertainty\results\0711_aniso_x4_test_nouncer
    log: D:\Fang\study\my_code\Github_code\Kernel_Uncertainty\results\0711_aniso_x4_test_nouncer
  ]
  is_train: False

22-07-12 16:42:28.392 - INFO: Dataset [GTDataset - Set14] is created.
22-07-12 16:42:28.392 - INFO: Number of test images in [Set14]: 14
22-07-12 16:42:28.426 - INFO: Network G structure: DataParallel - BlindNet_nouncer, with parameters: 2,851,587
22-07-12 16:42:28.426 - INFO: BlindNet_nouncer(
  (kernel_extra): kernel_extra(
    (Encoding_Block1): kernel_extra_Encoding_Block(
      (Conv_head): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (downsample): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): ReLU()
    )
    (Encoding_Block2): kernel_extra_Encoding_Block(
      (Conv_head): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (downsample): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): ReLU()
    )
    (Conv_mid): kernel_extra_conv_mid(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU()
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU()
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (9): ReLU()
      )
    )
    (Decoding_Block1): kernel_extra_Decoding_Block(
      (Conv_t): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (Conv_head): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (act): ReLU()
    )
    (Decoding_Block2): kernel_extra_Decoding_Block(
      (Conv_t): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (Conv_head): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (act): ReLU()
    )
    (Conv_tail): kernel_extra_conv_tail(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 441, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  (SR_net): DLSM(
    (Encoding): Encoding(
      (E1): Sequential(
        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E2): Sequential(
        (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E3): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E4): Sequential(
        (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E5): Sequential(
        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
    )
    (Decoding): Decoding(
      (D1): Sequential(
        (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (D2): Sequential(
        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (D3): Sequential(
        (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (D4): Sequential(
        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (w_generator): Sequential(
        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
        (4): Conv2d(32, 3, kernel_size=(1, 1), stride=(1, 1))
      )
      (u_generator): Sequential(
        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
        (4): Conv2d(32, 3, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (Den_con1): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
    (Den_con2): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
    (Den_con3): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
    (Den_con4): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
  )
)
22-07-12 16:42:28.433 - INFO: Loading model for G [../experiments/pretrained_models/0228_aniso_x4_nouncer/80000_G.pth] ...
22-07-12 16:42:28.448 - INFO: Model [B_Model] is created.
22-07-12 16:42:28.449 - INFO: 
Testing [Set14]...
22-07-12 16:42:29.121 - INFO: img_001              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 22.68/0.4789; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 45.20 dB.
22-07-12 16:42:30.087 - INFO: img_002              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 25.68/0.7159; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 44.33 dB.
22-07-12 16:42:30.852 - INFO: img_003              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 25.10/0.6067; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 45.46 dB.
22-07-12 16:42:31.296 - INFO: img_004              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 25.74/0.5348; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 45.25 dB.
22-07-12 16:42:31.742 - INFO: img_005              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 22.45/0.6422; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 45.21 dB.
22-07-12 16:42:32.063 - INFO: img_006              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 31.96/0.7630; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 45.28 dB.
22-07-12 16:42:32.680 - INFO: img_007              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 26.79/0.7614; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 44.88 dB.
22-07-12 16:42:33.067 - INFO: img_008              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 32.11/0.9072; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 45.29 dB.
22-07-12 16:42:33.720 - INFO: img_009              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 31.19/0.8370; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 44.85 dB.
22-07-12 16:42:34.406 - INFO: img_010              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 26.76/0.7183; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 45.12 dB.
22-07-12 16:42:35.405 - INFO: img_011              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 29.95/0.9160; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 44.61 dB.
22-07-12 16:42:36.150 - INFO: img_012              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 32.48/0.8588; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 44.62 dB.
22-07-12 16:42:37.039 - INFO: img_013              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 24.61/0.9097; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 44.74 dB.
22-07-12 16:42:37.729 - INFO: img_014              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 26.00/0.7324; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 44.78 dB.
22-07-12 16:42:37.729 - INFO: ----Set14 (14 images), average PSNR_Y/SSIM_Y: 27.39/0.7416, LR_PSNR_Y/LR_SSIM_Y: inf/1.0000, kernel PSNR: 44.97

22-07-12 16:42:37.731 - INFO:   name: 0711_aniso_x4_test_nouncer
  suffix: None
  model: blind
  distortion: sr
  scale: 4
  crop_border: None
  gpu_ids: [0]
  kernel_size: 21
  sig_min: 0.2
  sig_max: 4
  sig: 1.6
  sig1: [2.0, 2.0, 3.5, 3.5, 3.5, 4.0, 4.0, 4.0, 4.0]
  sig2: [0.5, 1.0, 1.5, 2.0, 2.0, 1.5, 2.0, 3.0, 4.0]
  theta: [0, 10, 30, 45, 90, 120, 135, 165, 180]
  test_noise: True
  noise: 0
  rate_iso: 0
  sv_mode: 0
  test_jpeg: False
  jpeg: 70
  cal_lr_psnr: False
  datasets:[
    test_1:[
      name: Set14
      mode: GT
      dataroot_GT: ../datasets/Set14/HR
      dataroot_LQ: None
      phase: test
      scale: 4
      data_type: img
    ]
  ]
  network_G:[
    which_model_G: BlindNet_nouncer
    scale: 4
  ]
  path:[
    strict_load: True
    pretrain_model_G: ../experiments/pretrained_models/0228_aniso_x4_nouncer/80000_G.pth
    root: D:\Fang\study\my_code\Github_code\Kernel_Uncertainty
    results_root: D:\Fang\study\my_code\Github_code\Kernel_Uncertainty\results\0711_aniso_x4_test_nouncer
    log: D:\Fang\study\my_code\Github_code\Kernel_Uncertainty\results\0711_aniso_x4_test_nouncer
  ]
  is_train: False

22-07-12 16:42:37.732 - INFO: Dataset [GTDataset - Set14] is created.
22-07-12 16:42:37.732 - INFO: Number of test images in [Set14]: 14
22-07-12 16:42:37.764 - INFO: Network G structure: DataParallel - BlindNet_nouncer, with parameters: 2,851,587
22-07-12 16:42:37.765 - INFO: BlindNet_nouncer(
  (kernel_extra): kernel_extra(
    (Encoding_Block1): kernel_extra_Encoding_Block(
      (Conv_head): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (downsample): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): ReLU()
    )
    (Encoding_Block2): kernel_extra_Encoding_Block(
      (Conv_head): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (downsample): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): ReLU()
    )
    (Conv_mid): kernel_extra_conv_mid(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): ReLU()
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): ReLU()
        (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (9): ReLU()
      )
    )
    (Decoding_Block1): kernel_extra_Decoding_Block(
      (Conv_t): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (Conv_head): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (act): ReLU()
    )
    (Decoding_Block2): kernel_extra_Decoding_Block(
      (Conv_t): ConvTranspose2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (Conv_head): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ResBlock1): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ResBlock2): ResBlock(
        (body): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (act): ReLU()
    )
    (Conv_tail): kernel_extra_conv_tail(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 441, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  (SR_net): DLSM(
    (Encoding): Encoding(
      (E1): Sequential(
        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E2): Sequential(
        (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E3): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E4): Sequential(
        (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (E5): Sequential(
        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
    )
    (Decoding): Decoding(
      (D1): Sequential(
        (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (D2): Sequential(
        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (D3): Sequential(
        (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (D4): Sequential(
        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
      )
      (w_generator): Sequential(
        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
        (4): Conv2d(32, 3, kernel_size=(1, 1), stride=(1, 1))
      )
      (u_generator): Sequential(
        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU()
        (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU()
        (4): Conv2d(32, 3, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (Den_con1): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
    (Den_con2): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
    (Den_con3): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
    (Den_con4): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
  )
)
22-07-12 16:42:37.769 - INFO: Loading model for G [../experiments/pretrained_models/0228_aniso_x4_nouncer/80000_G.pth] ...
22-07-12 16:42:37.785 - INFO: Model [B_Model] is created.
22-07-12 16:42:37.785 - INFO: 
Testing [Set14]...
22-07-12 16:42:38.479 - INFO: img_001              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 22.60/0.4665; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 44.31 dB.
22-07-12 16:42:39.442 - INFO: img_002              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 25.54/0.7072; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 43.61 dB.
22-07-12 16:42:40.206 - INFO: img_003              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 24.95/0.5928; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 44.53 dB.
22-07-12 16:42:40.635 - INFO: img_004              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 25.65/0.5255; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 44.63 dB.
22-07-12 16:42:41.044 - INFO: img_005              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 22.29/0.6272; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 44.30 dB.
22-07-12 16:42:41.363 - INFO: img_006              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 31.71/0.7550; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 44.36 dB.
22-07-12 16:42:42.018 - INFO: img_007              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 26.52/0.7514; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 43.99 dB.
22-07-12 16:42:42.411 - INFO: img_008              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 31.39/0.8980; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 44.40 dB.
22-07-12 16:42:43.060 - INFO: img_009              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 30.91/0.8310; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 44.01 dB.
22-07-12 16:42:43.753 - INFO: img_010              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 26.57/0.7079; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 44.28 dB.
22-07-12 16:42:44.722 - INFO: img_011              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 29.46/0.9094; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 43.78 dB.
22-07-12 16:42:45.519 - INFO: img_012              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 32.06/0.8539; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 43.78 dB.
22-07-12 16:42:46.434 - INFO: img_013              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 24.30/0.9001; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 43.92 dB.
22-07-12 16:42:47.140 - INFO: img_014              - PSNR/SSIM: 0.00/0.0000; PSNR_Y/SSIM_Y: 25.59/0.7158; LR_PSNR_Y/LR_SSIM_Y: inf/1.0000; PSNR_K: 43.96 dB.
22-07-12 16:42:47.141 - INFO: ----Set14 (14 images), average PSNR_Y/SSIM_Y: 27.11/0.7315, LR_PSNR_Y/LR_SSIM_Y: inf/1.0000, kernel PSNR: 44.13

